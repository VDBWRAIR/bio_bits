================= Contents ======================
1. Module usage
2. Sequence Files Concatenation Script
3. Fasta Sequence Merger

1. Module Usage
===================================================
For both scripts to ensure you can import the pyWrairLib you need to add the path to the directory that contains
pyWrairLib

Example
    export PYTHONPATH=/home/EIDRUdata/Tyghe/Repos

2. Sequence Files Concatenation
===================================================
sequence_files_concat.py

2.1  Intro 
=================================
When you have many fasta files that need to be concatenated into one file it can be a daunting task.
sequence_conat.py will take in all the fasta files in a directory and output a single concatenated file
using all of those files.


2.2 Usage
=================================
Shows you the help message
./sequence_files_concat.py -h

Options Supported:
-d or --fasta_dir tells the script which directory to search in for fasta files. The files must end in fna or fas
--strip <chars> tells the script to strip out characters that you supply. By default the script removes all '-' characters(dashes)
--debug <level> tells the script to output debugging information from a scale of 0 = Normal to 3 = Debug(lots of output)

2.3 Examples
================================
This will run the sequence_concat.py on the test directory and output the concatenated sequences to the screen
./sequence_files_concat.py -d test

This will run the sequence_concat.py on the test directory and also strip all of the 'R' out of the sequences
./sequence_files_concat.py -d test --strip R

3. Sequence Merger
===================================================
sequence_concat.py

3.1 Intro
=================================
Genbank and GISAid output fasta files so that they come in segments instead of different files.
sequence_concat.py will read a single fasta file from either and will merge all of the segments(in order)
and output a fasta file with the merged sequence data


3.2 Usage
================================
Show help message
./sequence_concat.py -h

Options Supported:
  -h, --help            show this help message and exit
  -f FASTA_FILE, --fasta=FASTA_FILE
                        The fasta file of the sequences to merge
  -t DB_TYPE, --type=DB_TYPE
                        What database type is this? gisaid and genbank are the
                        only two options right now. Default: genbank
  --strip=STRIP_CHARS   List of characters to strip from the sequences.
                        Default is none
  --test                Run the tests for this script

  Pruning Options:
    --noprune           Don't prune out sequences that don't have the required
                        amount of segments
    --segments_required=SEGMENTS_REQUIRED
                        Required segments per sequence. See README for
                        examples. Default: 1,2,3,4,5,6,7,8

3.2.1 Option Usage
========================

-t supports only genbank or gisaid

if you specify -t gisaid you will probably be also specifying --segments_required PB2,PB1,PA,HA,NP,NA,MP,NS

3.3 Examples
================================

By default the script will prune out any sequences that have missing segments. That is, if a sequence
has segments 1,2,4,5,7,8 (notice segment 3 & 6 are missing) and you are expecting all eight it will remove that sequence entirely from the
end output but it will print to standard error the sequences it removes and which segements they are missing

I.E. Running the following outputs
#>./sequence_concat.py -f example_files/example1.txt
==================== Sequences Missing Segments  ====================
>ident4 is missing segment[s] 2,4,5,6,7,8
>ident5 is missing segment[s] 2,3,4,5,6,7,8
>ident1 is missing segment[s] 4,5,6,7,8
>ident2 is missing segment[s] 4,5,6,7,8
>ident3 is missing segment[s] 3,4,5,6,7,8

By default sequence_concat.py will assume Genbank fasta format. If you want it to parse GISAid format then pass the -t gisaid option
#>./sequence_concat.py -f example_files/example2.txt -t gisaid
==================== Sequences Missing Segments  ====================
>ident4 is missing segment[s] 1,2,3,4,5,6,7,8
>ident5 is missing segment[s] 1,2,3,4,5,6,7,8
>ident1 is missing segment[s] 1,2,3,4,5,6,7,8
>ident2 is missing segment[s] 1,2,3,4,5,6,7,8
>ident3 is missing segment[s] 1,2,3,4,5,6,7,8

!!! Warning !!! You can see the above output is incorrect since it should be looking for segments A, B and C
#>./sequence_concat.py -f example_files/example2.txt -t gisaid --segments_required A,B,C
==================== Sequences Missing Segments  ====================
>ident4 is missing segment[s] C
>ident5 is missing segment[s] B,C
>ident3 is missing segment[s] A
>ident1
AAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCTTTTTTTTTTTTTTTTT
>ident2
AAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCC

Where if you sepecify the segments_required as 3 since in that example file there are only 3 segments you get the correct output.
#>./sequence_concat.py -f example_files/example1.txt --segments_required 1,2,3
==================== Sequences Missing Segments  ====================
>ident4 is missing segment[s] 2
>ident5 is missing segment[s] 2,3
>ident3 is missing segment[s] 3
>ident1
AAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCTTTTTTTTTTTTTTTTT
>ident2
AAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCC

Remember the Missing segments portion is printed to Standard Error so if you want the output and the missing segments to go to separate places do the following
#>./sequence_concat.py -f example_files/example1.txt --segments_required 1,2,3 > merged_output.fasta
==================== Sequences Missing Segments  ====================
>ident4 is missing segment[s] 2
>ident5 is missing segment[s] 2,3
>ident3 is missing segment[s] 3

Now you see that the contents of merged_output.fasta will contain what you want and you can then see which sequences are missing segments on the console


If you want to skip prunning all together then add the --noprune option
#>./sequence_concat.py -f example_files/example1.txt --noprune
>ident4
AAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTT
>ident5
AAAAAAAAAAAAAAAAA
>ident1
AAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCTTTTTTTTTTTTTTTTT
>ident2
AAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTTCCCCCCCCCCCCCCCCC
>ident3
AAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCC
